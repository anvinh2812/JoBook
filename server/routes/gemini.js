const express = require('express');
const router = express.Router();
const { GoogleGenerativeAI } = require('@google/generative-ai');
const pool = require('../config/database'); // PostgreSQL pool

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Schema m√¥ t·∫£ cho Gemini
const schemaDescription = `
Database JoBook (PostgreSQL):

1. users
- id (PK)
- full_name
- email (unique)
- password_hash
- account_type ('candidate' | 'company' | 'admin')
- bio
- avatar_url
- company_id (FK -> companies.id, nullable)
- created_at, updated_at

2. cvs
- id (PK)
- name
- user_id (FK -> users.id)
- file_url (PDF link)
- is_active
- created_at

3. posts
- id (PK)
- user_id (FK -> users.id)
- company_id (FK -> companies.id, nullable)
- post_type ('find_job' | 'find_candidate')
- title
- description
- attached_cv_id (FK -> cvs.id)
- created_at

4. applications
- id (PK)
- post_id (FK -> posts.id)
- cv_id (FK -> cvs.id)
- applicant_id (FK -> users.id)
- status ('pending','reviewed','accepted','rejected')
- created_at

5. follows
- follower_id (FK -> users.id)
- following_id (FK -> users.id)
- created_at

6. companies
- id (PK)
- name (NOT NULL)
- legal_name (nullable)
- tax_code (unique, NOT NULL)
- address (TEXT, NOT NULL)
- contact_phone (nullable)
- logo_url (nullable)
- status ('pending' | 'accepted' | 'rejected', default 'pending')
- reviewed_by_user_id (FK -> users.id, nullable)
- review_note (TEXT, nullable)
- reviewed_at (timestamp, nullable)
- created_at, updated_at
`;

router.post('/chat', async (req, res) => {
  try {
    const { prompt } = req.body;
    if (!prompt) {
      return res.status(400).json({ error: 'Prompt is required' });
    }

    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

    // B1. Prompt ƒë·ªÉ sinh SQL an to√†n
    const sqlPrompt = `
B·∫°n l√† tr·ª£ l√Ω SQL cho h·ªá th·ªëng JoBook. 
Schema c∆° s·ªü d·ªØ li·ªáu:

${schemaDescription}

QUY T·∫ÆC B·∫¢O M·∫¨T:
1. Ch·ªâ ƒë∆∞·ª£c ph√©p sinh c√¢u l·ªánh SQL SELECT.
2. Ch·ªâ ƒë∆∞·ª£c truy v·∫•n c√°c c·ªôt PUBLIC:
   - users: id, full_name, email, account_type, bio, avatar_url, created_at
   - cvs: id, name, file_url, is_active, created_at
   - posts: id, post_type, title, description, created_at
   - applications: id, post_id, cv_id, applicant_id, status, created_at
   - follows: follower_id, following_id, created_at
   - companies: id, name, address, contact_phone, logo_url, created_at
   - companies.status ch·ªâ ƒë∆∞·ª£c d√πng ƒë·ªÉ l·ªçc status='accepted'.
3. Tuy·ªát ƒë·ªëi KH√îNG ƒë∆∞·ª£c ph√©p truy v·∫•n c√°c c·ªôt nh·∫°y c·∫£m nh∆∞: 
   password_hash, tax_code, legal_name, company_id, review_note, reviewed_by_user_id, reviewed_at, hay status kh√°c 'accepted'.
4. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ d·ªØ li·ªáu thu·ªôc di·ªán private/b·∫£o m·∫≠t ‚Üí tr·∫£ l·ªùi ƒë√∫ng m·ªôt c√¢u: 
   "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin n√†y."

Ng∆∞·ªùi d√πng h·ªèi: "${prompt}"

üëâ N·∫øu c√¢u h·ªèi h·ª£p l·ªá, ch·ªâ in ra SQL SELECT ƒë√∫ng v·ªõi PostgreSQL.
üëâ N·∫øu c√¢u h·ªèi y√™u c·∫ßu d·ªØ li·ªáu nh·∫°y c·∫£m, tr·∫£ v·ªÅ ƒë√∫ng c√¢u: "Xin l·ªói! T√¥i kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin n√†y."
    `;

    const sqlResult = await model.generateContent(sqlPrompt);
    let sqlQuery = sqlResult.response.candidates[0].content.parts[0].text.trim();

    // Lo·∫°i b·ªè ```sql ... ```
    sqlQuery = sqlQuery.replace(/```sql|```/g, '').trim();

    console.log('üîé Gemini SQL:', sqlQuery);

    // N·∫øu AI tr·∫£ l·ªùi c√¢u b·∫£o m·∫≠t th√¨ tr·∫£ th·∫≥ng cho user
    if (sqlQuery.toLowerCase().includes('Xin l·ªói! T√¥i kh√¥ng c√≥ quy·ªÅn truy c·∫≠p')) {
      return res.json({ response: 'Xin l·ªói! T√¥i kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin n√†y.' });
    }

    // B·∫£o m·∫≠t: ch·ªâ cho ph√©p SELECT
    if (!sqlQuery.toLowerCase().startsWith('select')) {
      return res.json({ response: 'Xin l·ªói! T√¥i kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin n√†y.' });
    }

    // B2. Th·ª±c thi SQL
    const dbResult = await pool.query(sqlQuery);
    const rows = dbResult.rows;

    // B3. Nh·ªù Gemini tr·∫£ l·ªùi t·ª± nhi√™n d·ª±a tr√™n d·ªØ li·ªáu DB
    const answerPrompt = `
Ng∆∞·ªùi d√πng h·ªèi: "${prompt}"
D·ªØ li·ªáu t·ª´ database:
${JSON.stringify(rows, null, 2)}

üëâ H√£y tr·∫£ l·ªùi t·ª± nhi√™n, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát.
N·∫øu d·ªØ li·ªáu r·ªóng, h√£y tr·∫£ l·ªùi "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p."
    `;

    const answerResult = await model.generateContent(answerPrompt);
    const answerText = answerResult.response.candidates[0].content.parts[0].text;

    return res.json({ response: answerText, sql: sqlQuery, data: rows });
  } catch (err) {
    console.error('üö® Gemini DB Error:', err);
    return res.status(500).json({
      error: 'Gemini DB error',
      detail: err.message,
      stack: err.stack
    });
  }
});

module.exports = router;
